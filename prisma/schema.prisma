generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum QuestionType {
  default
  cat
  auction
}

model Category {
  id          Int         @default(autoincrement()) @id
  hash        String      @unique
  title       String
  roundId     Int         @map(name: "round_id")
  round       Round       @relation(fields: [roundId], references: [id])
  questions   Question[]

  @@map(name: "categories")
}

model Pack {
  id          Int           @default(autoincrement()) @id
  hash        String        @unique
  authorId    Int           @map(name: "author_id")
  author      User          @relation(fields: [authorId], references: [id])
  title       String
  timeout     Int?
  isPublished Boolean       @default(false) @map(name: "is_published")
  createdAt   DateTime      @default(now()) @map(name: "created_at")
  updatedAt   DateTime      @default(now()) @map(name: "updated_at")
  deletedAt   DateTime?     @map(name: "deleted_at")
  rounds      Round[]

  @@map(name: "packs")
}

model Question {
  id            Int         @default(autoincrement()) @id
  hash          String      @unique
  categoryId    Int         @map(name: "category_id")
  category      Category    @relation(fields: [categoryId], references: [id])
  text          String?
  answer        String?
  price         Int
  type          QuestionType
  timeout       Int?
  image         String?     @default("NULL")
  imageAnswer   String?     @default("NULL") @map(name: "image_answer")
  audio         String?     @default("NULL")

  @@map(name: "questions")
}

model Round {
  id            Int           @default(autoincrement()) @id
  packId        Int           @map(name: "pack_id")
  pack          Pack          @relation(fields: [packId], references: [id])
  timeout       Int?
  isFinal       Boolean       @default(false) @map(name: "is_final")
  categories    Category[]

  @@map(name: "rounds")
}

model User {
  id              Int          @default(autoincrement()) @id
  name            String?      @default("NULL")
  email           String       @unique
  password        String
  createdAt       DateTime     @default(now()) @map(name: "created_at")
  updatedAt       DateTime     @default(now()) @map(name: "updated_at")
  packs           Pack[]

  @@map(name: "users")
}
