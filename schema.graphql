### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Category {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  hash: String!
  id: Int!
  questions: [Question!]!
  round: Round!
  title: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

scalar DateTime

scalar Json

type Lobby {
  answeringUser: User
  choosingUser: User
  createdAt: DateTime!
  deletedAt: DateTime
  game: Json
  hash: String!
  id: Int!
  isStarted: Boolean!
  pack: Pack!
  password: String
  state: LobbyState
}

enum LobbyState {
  answer
  auction
  button
  cat
  choise
}

type LobbyUser {
  lobby: Lobby!
  score: Int!
  user: User!
}

type Mutation {
  createPack(timeout: Int, title: String!): Pack!
  deletePack(id: Int!): Pack
  publishPack(id: Int): Pack
  signIn(email: String!, password: String!): AuthPayload!
  signUp(user: UserCreateInput): AuthPayload!
  updatePack(id: Int!, timeout: Int = null, title: String!): Pack!
  updateUser(user: UserUpdateInput): User!
}

type Pack {
  author: User!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  hash: String!
  id: Int!
  isPublished: Boolean!
  rounds: [Round!]!
  timeout: Int
  title: String!
  updatedAt: DateTime!
  userVotes: [UserVote!]!
}

type Query {
  getMyPacks(searchString: String): [Pack!]!
  getPackByHash(hash: String): Pack
  getPackById(id: Int): Pack
  getPacks(searchString: String): [Pack!]!
  me: User
}

type Question {
  answer: String
  audio: String
  category: Category!
  createdAt: DateTime!
  deletedAt: DateTime
  hash: String!
  id: Int!
  image: String
  imageAnswer: String
  price: Int!
  text: String
  timeout: Int
  type: QuestionType!
}

scalar QuestionType

type Round {
  categories: [Category!]!
  createdAt: DateTime!
  deletedAt: DateTime
  id: Int!
  isFinal: Boolean!
  pack: Pack!
  timeout: Int
}

type Subscription {
  userSignedIn(userId: Int!): User!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  createdAt: DateTime!
  deletedAt: DateTime
  email: String!
  id: Int!
  lobbyUsers: [LobbyUser!]!
  name: String
  packs: [Pack!]!
  packVotes: [UserVote!]!
  password: String!
  updatedAt: DateTime!
}

input UserCreateInput {
  email: String!
  name: String
  password: String!
}

input UserUpdateInput {
  name: String
}

type UserVote {
  dislike: Boolean
  like: Boolean
  pack: Pack!
  user: User!
}
